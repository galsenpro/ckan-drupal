<?php

 /**
  * @file ckan.module
  * Intgration with CKAN data hub.
  */



function ckan_menu() {
  $items = array();

  $items['admin/settings/ckan'] = array(
    'title' => t('CKAN admin page'),
    'access arguments' => array('access content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ckan_admin_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


function _ckan_admin_form(&$form_state) {

  $form = array();

  //test connection to CKAN
  require_once(drupal_get_path('module', 'ckan').'/lib/ckan.lib.inc');
  $url =variable_get('ckan_connection_url', '');
  $apikey = variable_get('ckan_connection_api_key', '');
  $ckan = new Ckan($url, $apikey);

  try {
    $connection = $ckan->getApiVersion();
  } catch (Exception $e) {
    drupal_set_message("Could not connect to CKAN instance at ".$url." with key ".$apikey, 'error');
  }

  if (!($connection['version'] >=1)) {
    $api_message = 'Could not connect';
  } else {
    $api_message = "version ".$connection['version'];
  }

  $form['ckan_api_version'] = array(
    '#type' => 'textfield',
    '#title' => 'CKAN API',
    '#size' => 20,
    '#value' => $api_message,
    '#disabled' => TRUE,
    '#description' => t('The CKAN API version.'),
  );

  $form['ckan_connection_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Connection url',
    '#description' => t('e.g. http://127.0.0.1:5000'),
    '#default_value' => variable_get('ckan_connection_url', ''),
  );

  $form['ckan_connection_api_key'] = array(
    '#type' => 'textfield',
    '#title' => 'Connection API key',
    '#description' => t('Your ckan api key.'),
    '#default_value' => variable_get('ckan_connection_api_key', ''),
  );

  $vocabularies = taxonomy_get_vocabularies();
  $options_vocabularies = array();
  foreach ($vocabularies as $vocabulary) {
    $options_vocabularies[$vocabulary->vid] = $vocabulary->name;
  }

  $form['ckan_vocabulary_id'] = array(
    '#type' => 'select',
    '#title' => 'CKAN Vocabulary',
    '#description' => t('The vocabulary to use when tagging packages.'),
    '#default_value' => variable_get('ckan_vocabulary_id', ''),
    '#options' => $options_vocabularies,
  );

  return system_settings_form($form);
}

/*
 * Validate the admin form
 */
function _ckan_admin_form_validate($form, &$form_state) {

  $vocabularies = taxonomy_get_vocabularies();
  $ckan_vocabulary = $vocabularies[$form_state['values']['ckan_vocabulary_id']];

  // Check that CKAN vocabulary has allowed vocabulary settings
  if (!$ckan_vocabulary->tags) { form_set_error('ckan_vocabulary_id','Can not use vocabulary. Tags are not enabled in selected vocabulary.');}

}

 /**
  * Defines function signatures for resources available to services.
  *
  * Functionally this is very similar to the way hook_menu() works, and in many
  * ways Services can be seen as an abstraction layer on top of hook_menu().
  *
  * @return
  *   An associative array which defines available resources.
  *
  *   The associative array which defines services has six possible top
  *   level keys:
  *
  *     - create
  *     - retrieve
  *     - update
  *     - delete
  *     - actions
  *     - targeted actions
  *
  *   The first four (the CRUD functions) define the indvidual service
  *   callbacks for each function. However 'actions' and 'targeted actions'
  *   can contain multiple callbacks.
  *
  *   For those familiar with Services 2.x, these callbacks are created
  *   similarly, but the keys have changed around a bit. The following keys
  *   are used to describe a callback.
  *
  *   - help: Text describing what this callback does.
  *   - callback: The name of a function to call when this resource is
  *     requested.
  *   - access callback: The name of a function to call to check whether
  *     the requesting user has permission to access this resource. If not
  *     specified, this defaults to 'user_access'.
  *   - access arguments: The arguments to pass to the access callback.
  *   - access arguments append: A boolean indicating whether the resource's
  *     arguments should be appended to the access arguments. This can be useful
  *     in situations where an access callback is specific to the particular
  *     item ('edit all nodes' vs 'edit my nodes'). Defaults to FALSE.
  *   - args: an array describing the arguments which should be passed to this
  *     resource when it is called. Each element in the array is an associative
  *     array containing the following keys:
  *
  *     - name: The name of this argument.
  *     - type: The data type of this argument (int, string, array)
  *     - description: Text describing this argument's usage.
  *     - optional: A boolean indicating whether or not this argument is optional.
  *     - source: Where this argument should be retrieved from. This can be
  *       'data' (indicating the POST data), 'param' (indicating the query
  *       string) or 'path' (indicating the url path). In the case of path,
  *       an additional parameter must be passed indicating the index to be used.
  *     - default value: this is a value that will be passed to the method for this particular argument if no argument value is passed
  */
function ckan_services_resources() {
  $services = array();

 /*
  *  API for CKAN package management
  *
  *  Index            | Return list of Package nids
  *  Retrieve         | Return the data of a Package node
  *  Create           | Create a bare Package node
  *  Update           | Update a Package node.
  *  Delete           | Delete a Package node
  *  Action           |
  *         Save      | Loads and Saves a package node.
  *  Targeted Action  |
  *
  */


  $services['package']['index'] = array(
    'help' => 'index a package',
    'callback' => '_ckanrest_index',
    'access callback' => '_ckanrest_access',
    'file' => array('file' => 'inc', 'module' => 'ckan', 'name' => 'includes/ckan.service'),
    'args' => array( ),
  );

  $services['package']['retrieve'] = array(
    'help' => 'Retrieves a package',
    'callback' => '_ckanrest_retrieve',
    'access callback' => '_ckanrest_access',
    'file' => array('file' => 'inc', 'module' => 'ckan', 'name' => 'includes/ckan.service'),
    'args' => array(
      array(
        'name' => 'nid',
        'type' => 'int',
        'description' => 'The nid of the ckan package to get',
        'source' => array('path' => '0'),
        'optional' => FALSE,
      ),
    ),
  );

  $services['package']['create'] = array(
    'help' => 'Creates a Package',
    'callback' => '_ckanrest_create',
    'access callback' => '_ckanrest_access',
    'file' => array('file' => 'inc', 'module' => 'ckan', 'name' => 'includes/ckan.service'),
    'args' => array(
      array(
        'name' => 'data',
        'type' => 'array',
        'description' => 'The package object',
        'source' => 'data',
        'optional' => FALSE,
      ),
    ),
  );

  $services['package']['update'] = array(
    'help' => 'Update a Package node',
    'callback' => '_ckanrest_update',
    'access callback' => '_ckanrest_access',
    'file' => array('file' => 'inc', 'module' => 'ckan', 'name' => 'includes/ckan.service'),
    'args' => array(
      array(
       'name' => 'nid',
        'type' => 'int',
        'description' => 'A ckan package nid to update(save)',
        'source' => array('path' => '0'),
        'optional' => FALSE,
      ),
      array(
        'name' => 'data',
        'type' => 'array',
        'description' => 'The package object',
        'source' => 'data',
        'optional' => FALSE,
      ),
    ),
  );

  $services['package']['delete'] = array(
    'help' => 'Delete a Package node',
    'callback' => '_ckanrest_delete',
    'access callback' => '_ckanrest_access',
    'file' => array('file' => 'inc', 'module' => 'ckan', 'name' => 'includes/ckan.service'),
    'args' => array(
      array(
        'name' => 'nid',
        'type' => 'int',
        'description' => 'The nid of the ckan package to delete',
        'source' => array('path' => '0'),
        'optional' => FALSE,
      ),
    ),
  );


 /*
  *  Supply a Package nid to save the node.
  *  Needed because of direct drupal databases writes by CKAN
  *
  *  @todo Using actions instead of targed actions because of bugs in services 6.x-3.0-rc1
  */
  $services['package']['actions'] = array(
    'save' => array(
      'help' => 'Loads and Saves a Package node.',
      'callback' => '_ckanrest_save',
      'access callback' => '_ckanrest_access',
      'file' => array('file' => 'inc', 'module' => 'ckan', 'name' => 'includes/ckan.service'),
      'args' => array(
        array(
          'name' => 'nid',
          'type' => 'int',
          'description' => 'A valid Package node ID',
          'source' => 'data',
          'optional' => FALSE,
        ),
      ),
    ),
  );

  return $services;
}


/**
 * Access callback for the ckan resource.
 *
 * @return bool
 *  Whether access is given or not.
 */
function  _ckanrest_access() {
  return TRUE;
}

/**
* Implementation of hook_ctools_plugin_api().
*/

function ckan_ctools_plugin_api($owner, $api) {
 return array(
  'version' => 3,
   'file' => 'ckan.services.inc', // Optional parameter to indicate the file name to load.
   'path' => drupal_get_path('module', 'ckan') . '/includes', // If specifying the file key, path is required.
    );
 }


function ckan_views_api(){
  // Note that you can include 'path' in this array so that your views.inc
  // file can be stored in a different location.
  return array(
    'path' => drupal_get_path('module', 'ckan') . '/includes',
    'api' => 2.0,
  );
}


/**
 * Implementation of hook_node_info().
 */
function ckan_node_info() {
  return array(
    'ckan_package' => array(
      'name' => 'Package',
      'module' => 'ckan',
      'description' => 'A ckan package.',
      'help' => '',
      'min_word_count' => '',
      'locked' => FALSE,
    ),
  );
}

function get_ckan_value($node, $field) {
  return isset($node->ckan[$field]) ? $node->ckan[$field] : '';
}

function get_ckan_resource_value($node, $resource_num, $field) {
  return isset($node->ckan['resource'][$resource_num][$field]) ? 
    $node->ckan['resource'][$resource_num][$field] : '';
}

function get_ckan_extra_value($node, $extra_num, $field) {
  return isset($node->ckan['extras'][$extra_num][$field]) ? 
    $node->ckan['extras'][$extra_num][$field] : '';
}

/**
 * Implementation of hook_form().
 *
 * Now it's time to describe the form for collecting the information
 * specific to this node type. This hook requires us to return an array with
 * a sub array containing information for each element in the form.
 */
function ckan_form(&$node, $form_state) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  $type = node_get_types('type', $node);

  if (!is_numeric(variable_get('ckan_vocabulary_id', ''))) {
    form_set_error('', 'CKAN vocabulary has not been set. You can set it at '.l('CKAN admin page', 'admin/settings/ckan').'.');
  }

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => get_ckan_value($node, 'title'),
    '#weight' => -5
  );

  $form['ckan']['title'] = array(
    '#type' => 'hidden',
    '#value' => get_ckan_value($node, 'title'),
  );

  $form['body'] = node_body_field($node, $type->body_label, $type->min_word_count);
  //Always use ckan notes as the default body instead of what is in drupal's tables.
  $form['body']['body']['#default_value'] = get_ckan_value($node, 'notes');

  $form['ckan'] = array(
    '#tree' => TRUE,
  );

  // We need a hidden ckan_id field as the disabled field value isn't passed through to the node.
  // This ckan_id is needed as a key for the api call to update this package.
  $form['ckan']['id'] = array(
    '#type' => 'hidden',
    '#value' => get_ckan_value($node, 'id'),
  );
  $form['ckan']['id_display'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan id',
    '#default_value' => get_ckan_value($node, 'id'),
    '#disabled' => TRUE,
  );

  $form['ckan']['name'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan name',
    '#default_value' => get_ckan_value($node, 'name'),
    '#required' => TRUE,
    '#weight' => '0',
  );
  $form['ckan']['version'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan version',
    '#default_value' => get_ckan_value($node, 'version'),
  );
  $form['ckan']['url'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan url',
    '#default_value' => get_ckan_value($node, 'url'),
  );
  $form['ckan']['author'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan author',
    '#default_value' => get_ckan_value($node, 'author'),
  );
  $form['ckan']['author_email'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan author email',
    '#default_value' => get_ckan_value($node, 'author_email'),
  );
  $form['ckan']['maintainer'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan maintainer',
    '#default_value' => get_ckan_value($node, 'maintainer'),
  );
  $form['ckan']['maintainer_email'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan maintainer email',
    '#default_value' => get_ckan_value($node, 'maintainer_email'),
  );

  $license_options = array();
  $sql = "SELECT license_id, license_name
          FROM {ckan_license} ";
  $resource = db_query($sql);
  while ($row = db_fetch_array($resource)) {
    $license_options[$row['license_id']]  = $row['license_name'];
  }

  $form['ckan']['license_id'] = array(
    '#type' => 'select',
    '#title' => 'ckan license_id',
    '#default_value' => get_ckan_value($node, 'license_id'),
    '#options' => $license_options,
  );
  $form['ckan']['update_date'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan update_date',
    '#default_value' => get_ckan_value($node, 'update_date'),
    '#disabled' => TRUE,
  );
  $form['ckan']['state'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan state',
    '#default_value' => get_ckan_value($node, 'state'),
    '#disabled' => TRUE,
  );
   $form['ckan']['completed'] = array(
    '#type' => 'textfield',
    '#title' => 'ckan completed',
    '#default_value' => get_ckan_value($node, 'completed'),
    '#disabled' => TRUE,
  );

  $form['ckan']['resource'] = array(
    '#prefix' => '<div id="ckan-package-resource"><h2>Resources:</h2>',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#tree' => TRUE,
  );

  // Add resources fieldsets to the package form.
  $num_resources = isset($node->ckan['resource']) ? count($node->ckan['resource']) + 1 : 1;
  for ($delta = 0; $delta < $num_resources; $delta++) {
    $form['ckan']['resource'][$delta] = array(
      '#type' => 'fieldset',
      '#title' => 'Resource '.$delta,
      '#tree' => TRUE,
      '#collapsible' => TRUE,
    );

    //@todo Bad urls return 409, so try to validate
    $form['ckan']['resource'][$delta]['url'] = array(
      '#type' => 'textfield',
      '#title' => 'Resource '.$delta.' url',
      '#default_value' => get_ckan_resource_value($node, $delta, 'url'),
    );

    $form['ckan']['resource'][$delta]['description'] = array(
      '#type' => 'textfield',
      '#title' => 'Resource '.$delta.' description',
      '#default_value' => get_ckan_resource_value($node, $delta, 'description'),
    );

    $form['ckan']['resource'][$delta]['format'] = array(
      '#type' => 'textfield',
      '#title' => 'Resource '.$delta.' format',
      '#default_value' => get_ckan_resource_value($node, $delta, 'format'),
    );

    // Add a hidden Resource id to determine new resources.
    $form['ckan']['resource'][$delta]['id'] = array(
      '#type' => 'hidden',
      '#value' => get_ckan_resource_value($node, $delta, 'id'),
    );
  }

  // Add extras fieldsets to the package form.
  $form['ckan']['extras'] = array(
    '#prefix' => '<div id="ckan-package-extras"><h2>Extras:</h2>',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#tree' => TRUE,
  );

  $num_extras = isset($node->ckan['extras']) ? count($node->ckan['extras']) + 1 : 1;
  for ($i = 0; $i < $num_extras; $i++) {
    $form['ckan']['extras'][$i] = array(
      '#type' => 'fieldset',
      '#title' => 'Extra '.$i,
      '#tree' => TRUE,
      '#collapsible' => TRUE,
    );

    $form['ckan']['extras'][$i]['key'] = array(
      '#type' => 'textfield',
      '#title' => 'Extra '.$i.' key',
      '#default_value' => get_ckan_extra_value($node, $i, 'key'),
    );

    $form['ckan']['extras'][$i]['value'] = array(
      '#type' => 'textfield',
      '#title' => 'Extra '.$i.' value',
      '#default_value' => get_ckan_extra_value($node, $i, 'value'),
    );

    // Add a hidden Extra id
    $form['ckan']['extras'][$i]['id'] = array(
      '#type' => 'hidden',
      '#value' => get_ckan_extra_value($node, $i, 'id'),
    );
  }

  // Add our own validator.
  $form['#validate']= array('ckan_form_validate');

  return $form;
}


/*
 * Validate against the CKAN API
 */
function ckan_form_validate($form, &$form_state) {
  require_once(drupal_get_path('module', 'ckan').'/lib/ckan.lib.inc');
  $ckan = new Ckan(variable_get('ckan_connection_url', ''), variable_get('ckan_connection_api_key', ''));

  $package = _ckan_package_form_to_api($form_state['values']);

  // Is this an update?
  $op = $form_state['values']['ckan']['id'] ? "validateUpdatePackage" : "validateCreatePackage" ;

  try {
    // Call the correct method, depending on update or create package
    $return = call_user_func_array(array($ckan, $op), array(json_encode($package)));
  } catch (Exception $e) {
    // Set a general form erros
    form_set_error('', $e->getMessage());

    // Set any specific form errors
    $errors = $e->getData();

    // Handle name errors
    if ($errors['error']['name'][0]) {
      form_set_error('ckan][name', $errors['error']['name'][0]);
    }

    // Handle tag errors
    if (isset($errors['error']['tags'])) {
      foreach ($errors['error']['tags'] as $error) {
        form_set_error('taxonomy', $error['name'][0]);
      }
    }
  }

}


/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function ckan_load($node) {
  $sql = "SELECT *
          FROM {ckan_package}
          WHERE nid = %d ";
  // Put the loaded information into a ckan key to avoid naming collisions.
  $additions['ckan'] = db_fetch_array(db_query($sql, $node->nid));

  // Load the resources too.
  $sql = "SELECT *
          FROM {ckan_resource}
          WHERE nid = %d
          ORDER BY position ";
  $result = db_query($sql, $node->nid);
  while ($row = db_fetch_array($result)) {
    $additions['ckan']['resource'][] = $row;
  }

  // Load the extras
  $sql = "SELECT *
          FROM {ckan_package_extra}
          WHERE nid = %d";
  $result = db_query($sql, $node->nid);
  while ($row = db_fetch_array($result)) {
    $additions['ckan']['extras'][] = $row;
  }

  return $additions;
}


/**
 * Implementation of hook_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function ckan_insert($node) {
  // Always quit if this is a service call operation.
  if (isset($node->services_call) && $node->services_call) {
    return;
  }

  require_once(drupal_get_path('module', 'ckan').'/lib/ckan.lib.inc');
  $ckan = new Ckan(variable_get('ckan_connection_url', ''), variable_get('ckan_connection_api_key', ''));
  $package = _ckan_package_form_to_api((array)$node);

  try {
    $return = $ckan->createPackage(json_encode($package));
  } catch (Exception $e) {
    form_set_error('', $e->getMessage());
    // Delete node if something has gone wrong
    if (is_numeric($node->nid)) {
      node_delete($node->nid);
    }
  }

}


/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function ckan_update($node) {
  // Always quit if this is a service call operation.
  if (isset($node->services_call) && $node->services_call) {
    return;
  }

  require_once(drupal_get_path('module', 'ckan').'/lib/ckan.lib.inc');
  $ckan = new Ckan(variable_get('ckan_connection_url', ''), variable_get('ckan_connection_api_key', ''));
  $package = _ckan_package_form_to_api((array)$node);

  try {
    $return = $ckan->updatePackage(json_encode($package));
  } catch (Exception $e) {
    form_set_error('', $e->getMessage());
  }

}


/**
 * Implementation of hook_view().
 *
 * This is a typical implementation that simply runs the node text through
 * the output filters.
 */
function ckan_view($node, $teaser = FALSE, $page = FALSE) {

  drupal_add_js("/misc/collapse.js");
  $node->content['ckan'] = array(
    '#value' => theme('ckan_package_info', $node),
    '#weight' => 1,
  );
  $node->content['ckan']['resource'] = array(
    '#value' => theme('ckan_package_resource_info', $node),
    '#weight' => 1,
  );
  $node->content['ckan']['extras'] = array(
    '#value' => theme('ckan_package_extras_info', $node),
    '#weight' => 1,
  );

  return $node;
}


/**
 * Implementation of hook_delete().
 *
 * When a node is deleted, we need to remove all related records from our table.
 */
function ckan_delete($node) {

  require_once(drupal_get_path('module', 'ckan').'/lib/ckan.lib.inc');
  $ckan = new Ckan(variable_get('ckan_connection_url', ''), variable_get('ckan_connection_api_key', ''));
  $package = array('id' => $node->ckan['id']);
  try {
    $return = $ckan->deletePackage(json_encode($package));
  } catch (Exception $e) {
    form_set_error('', $e->getMessage());
  }
}


/**
 * Implementation of hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function ckan_theme() {
  return array(
    'ckan_package_info' => array(
      'arguments' => array('node'),
    ),
   'ckan_package_resource_info' => array(
      'arguments' => array('node'),
    ),
   'ckan_package_extras_info' => array(
      'arguments' => array('node'),
    ),
  );
}


/**
 * A custom theme function.
 *
 * By using this function to format our node-specific information, themes
 * can override this presentation if they wish. We also wrap the default
 * presentation in a CSS class that is prefixed by the module name. This
 * way, style sheets can modify the output without requiring theme code.
 */
function theme_ckan_package_info($node) {
  $output = '<div class="ckan_package_info"><h4>Package</h4><ul>';

  if ($node->ckan) {
    foreach ($node->ckan as $key => $value) {
      if (is_array($value)) continue; // Don't process arrays
      $output .= "<li>";
      $output .= t('%keyname : %value ', array('%keyname' => check_plain($key), '%value' => check_plain($value) ));
      $output .= "</li>";
    }
  }
  $output .= '</ul></div>';
  return $output;
}

/**
 * A custom theme function to render resources
 *
 */
function theme_ckan_package_resource_info($node) {
  if (!isset($node->ckan['resource'])) {
    return '';
  }

  $output = '<fieldset class="collapsible" ><legend>Resources</legend><div>';
  $i =0;
  foreach ($node->ckan['resource'] as $resource) {
    $i++;
    $output .= "<ul><p>Resource ".$i."</p>";

    foreach ($resource as $key => $value) {
      $output .= "<li>";
      $output .= t('%keyname : %value ', array('%keyname' => check_plain($key)."", '%value' => $value ));
      $output .= "</li>";
    }
    $output .= "</ul>";
  }
  $output .= '</div></fieldset>';
  return $output;
}

/**
 * A custom theme function to render package extras
 *
 */
function theme_ckan_package_extras_info($node) {
  if (!isset($node->ckan['extras'])) {
    return '';
  }

  $output = '<fieldset class="collapsible"><legend>Extras</legend><div><ul>';
  $i = 0;
  foreach ($node->ckan['extras'] as $extra) {
    $i++;
    $output .= "<li>";
    $output .= t('%keyname : %value ', 
      array('%keyname' => check_plain($extra['key'])."", 
        '%value' => $extra['value']
    ));
    $output .= "</li>";
  }
  $output .= '</ul></div></fieldset>';
  return $output;
}

/*
 * Function to return the ckan API array
 *
 * @param $values array
 *  Node , normally from a form.
 *
 * @return array
 *  ckan API array ready for JSON encoding
 */
function _ckan_package_form_to_api($values) {
  $package = array();

  // Is this an update?
  if ($values['ckan']['id']) {
    $package['id'] = $values['ckan']['id'];
  }

  // Map to CKAN States. Unpublished = deleted.
  $package['state'] = $values['status'] ? 'active' : 'deleted';

  // Add the optional values in.
  $package['nid']              = $values['nid'];
  $package['title']            = $values['title'];
  $package['name']             = $values['ckan']['name'];
  $package['version']          = $values['ckan']['version'];
  $package['url']              = $values['ckan']['url'];
  $package['author']           = $values['ckan']['author'];
  $package['author_email']     = $values['ckan']['author_email'];
  $package['maintainer']       = $values['ckan']['maintainer'];
  $package['maintainer_email'] = $values['ckan']['maintainer_email'];
  $package['notes']            = $values['body'];
  $package['license_id']       = $values['ckan']['license_id'];

  //Add Tags
  $ckan_vocabulary_id = variable_get('ckan_vocabulary_id', '');
  // Check that we have at least a single charachter that we can use as a term.
  if (strlen($values['taxonomy']['tags'][$ckan_vocabulary_id]) >1) {
    $terms = explode(',', $values['taxonomy']['tags'][$ckan_vocabulary_id]);
    foreach ($terms as $term) {
      $package['tags'][] = array('name' => trim($term));
    }
  }

  // Add Resources
  $resources = array();
  $submissions = $values['ckan']['resource'];
  foreach ($submissions as $resource) {
    if (!empty($resource['url']) ) {
      $resources[] = $resource;
    }
  }
  $package['resources'] = $resources;

  return $package;
}
